// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

//change IMG to File[]

model Listing {
    id               Int       @id @default(autoincrement())
    img              String?
    name             String
    location         String
    askingPrice      Float?
    grossRev         Float?
    adjCashFlow      Float?
    ebita            Float?
    ffe              Float?
    inventory        Float?
    rent             Float?
    est              DateTime?
    description      String?
    realEstate       String?
    buildingSf       String?
    leaseExp         DateTime?
    employees        Int?
    facilities       String?
    reasonForSelling String?
    franchise        Boolean?
    userId           String?
    liked            Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    User User? @relation(fields: [userId], references: [id])

    likes Like[]

    @@index([name])
    @@index([userId])
}

model Like {
    userId    String
    listingId Int

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, listingId])
    @@index([userId])
    @@index([listingId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    firstName     String    @default("John")
    lastName      String    @default("Smith")
    email         String    @unique
    title         String?
    mobilePhone   String?
    officePhone   String?
    homePhone     String?
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]
    listings Listing[]
    likes    Like[]
    messages Message[]

    messageId String?
}

model File {
    id    String @id @default(cuid())
    input String
}

model Message {
    id        String   @id @default(cuid())
    parentId  String
    userId    String
    topicId   String?
    message   String
    createdAt DateTime @default(now())

    users User @relation(fields: [userId], references: [id])

    parent   Message   @relation("parent", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    children Message[] @relation("parent")

    Topic Topic? @relation(fields: [topicId], references: [id])

    @@index([parentId])
    @@index([userId])
    @@index([topicId])
}

model Topic {
    id      String    @id @default(cuid())
    userId  String
    title   String
    message Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
