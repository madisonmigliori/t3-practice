// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Listing {
    id          Int     @id @default(autoincrement())
    name        String
    location    String
    askingPrice Float?
    grossRev    Float?
    adjCashFlow Float?
    userId      String?
    liked       Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    User User? @relation(fields: [userId], references: [id])

    likes Like[]

    @@index([name])
    @@index([userId])
}

model Like {
    userId    String
    listingId Int

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@id([userId, listingId])
    @@index([userId])
    @@index([listingId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    firstName     String    @default("First Name")
    lastName      String    @default("Last Name")
    email         String    @unique
    title         String?
    mobilePhone   String?
    officePhone   String?
    homePhone     String?
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]
    listings Listing[]
    likes    Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
